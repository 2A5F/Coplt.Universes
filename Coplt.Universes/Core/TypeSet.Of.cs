// generated by template, do not modify manually

using System.Collections.Immutable;
using System.Runtime.CompilerServices;

namespace Coplt.Universes.Core;

public abstract partial class TypeSet
{
    public static TypeSet Of<T0>() => Get<S<T0>>();
    public readonly struct S<T0> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>());
    }
    public static TypeSet Of<T0, T1>() => Get<S<T0, T1>>();
    public readonly struct S<T0, T1> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>());
    }
    public static TypeSet Of<T0, T1, T2>() => Get<S<T0, T1, T2>>();
    public readonly struct S<T0, T1, T2> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>());
    }
    public static TypeSet Of<T0, T1, T2, T3>() => Get<S<T0, T1, T2, T3>>();
    public readonly struct S<T0, T1, T2, T3> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4>() => Get<S<T0, T1, T2, T3, T4>>();
    public readonly struct S<T0, T1, T2, T3, T4> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5>() => Get<S<T0, T1, T2, T3, T4, T5>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6>() => Get<S<T0, T1, T2, T3, T4, T5, T6>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>(), TypeMeta.Of<T42>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>(), TypeMeta.Of<T42>(), TypeMeta.Of<T43>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>(), TypeMeta.Of<T42>(), TypeMeta.Of<T43>(), TypeMeta.Of<T44>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>(), TypeMeta.Of<T42>(), TypeMeta.Of<T43>(), TypeMeta.Of<T44>(), TypeMeta.Of<T45>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>(), TypeMeta.Of<T42>(), TypeMeta.Of<T43>(), TypeMeta.Of<T44>(), TypeMeta.Of<T45>(), TypeMeta.Of<T46>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>(), TypeMeta.Of<T42>(), TypeMeta.Of<T43>(), TypeMeta.Of<T44>(), TypeMeta.Of<T45>(), TypeMeta.Of<T46>(), TypeMeta.Of<T47>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>(), TypeMeta.Of<T42>(), TypeMeta.Of<T43>(), TypeMeta.Of<T44>(), TypeMeta.Of<T45>(), TypeMeta.Of<T46>(), TypeMeta.Of<T47>(), TypeMeta.Of<T48>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>(), TypeMeta.Of<T42>(), TypeMeta.Of<T43>(), TypeMeta.Of<T44>(), TypeMeta.Of<T45>(), TypeMeta.Of<T46>(), TypeMeta.Of<T47>(), TypeMeta.Of<T48>(), TypeMeta.Of<T49>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>(), TypeMeta.Of<T42>(), TypeMeta.Of<T43>(), TypeMeta.Of<T44>(), TypeMeta.Of<T45>(), TypeMeta.Of<T46>(), TypeMeta.Of<T47>(), TypeMeta.Of<T48>(), TypeMeta.Of<T49>(), TypeMeta.Of<T50>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>(), TypeMeta.Of<T42>(), TypeMeta.Of<T43>(), TypeMeta.Of<T44>(), TypeMeta.Of<T45>(), TypeMeta.Of<T46>(), TypeMeta.Of<T47>(), TypeMeta.Of<T48>(), TypeMeta.Of<T49>(), TypeMeta.Of<T50>(), TypeMeta.Of<T51>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>(), TypeMeta.Of<T42>(), TypeMeta.Of<T43>(), TypeMeta.Of<T44>(), TypeMeta.Of<T45>(), TypeMeta.Of<T46>(), TypeMeta.Of<T47>(), TypeMeta.Of<T48>(), TypeMeta.Of<T49>(), TypeMeta.Of<T50>(), TypeMeta.Of<T51>(), TypeMeta.Of<T52>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>(), TypeMeta.Of<T42>(), TypeMeta.Of<T43>(), TypeMeta.Of<T44>(), TypeMeta.Of<T45>(), TypeMeta.Of<T46>(), TypeMeta.Of<T47>(), TypeMeta.Of<T48>(), TypeMeta.Of<T49>(), TypeMeta.Of<T50>(), TypeMeta.Of<T51>(), TypeMeta.Of<T52>(), TypeMeta.Of<T53>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>(), TypeMeta.Of<T42>(), TypeMeta.Of<T43>(), TypeMeta.Of<T44>(), TypeMeta.Of<T45>(), TypeMeta.Of<T46>(), TypeMeta.Of<T47>(), TypeMeta.Of<T48>(), TypeMeta.Of<T49>(), TypeMeta.Of<T50>(), TypeMeta.Of<T51>(), TypeMeta.Of<T52>(), TypeMeta.Of<T53>(), TypeMeta.Of<T54>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>(), TypeMeta.Of<T42>(), TypeMeta.Of<T43>(), TypeMeta.Of<T44>(), TypeMeta.Of<T45>(), TypeMeta.Of<T46>(), TypeMeta.Of<T47>(), TypeMeta.Of<T48>(), TypeMeta.Of<T49>(), TypeMeta.Of<T50>(), TypeMeta.Of<T51>(), TypeMeta.Of<T52>(), TypeMeta.Of<T53>(), TypeMeta.Of<T54>(), TypeMeta.Of<T55>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>(), TypeMeta.Of<T42>(), TypeMeta.Of<T43>(), TypeMeta.Of<T44>(), TypeMeta.Of<T45>(), TypeMeta.Of<T46>(), TypeMeta.Of<T47>(), TypeMeta.Of<T48>(), TypeMeta.Of<T49>(), TypeMeta.Of<T50>(), TypeMeta.Of<T51>(), TypeMeta.Of<T52>(), TypeMeta.Of<T53>(), TypeMeta.Of<T54>(), TypeMeta.Of<T55>(), TypeMeta.Of<T56>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>(), TypeMeta.Of<T42>(), TypeMeta.Of<T43>(), TypeMeta.Of<T44>(), TypeMeta.Of<T45>(), TypeMeta.Of<T46>(), TypeMeta.Of<T47>(), TypeMeta.Of<T48>(), TypeMeta.Of<T49>(), TypeMeta.Of<T50>(), TypeMeta.Of<T51>(), TypeMeta.Of<T52>(), TypeMeta.Of<T53>(), TypeMeta.Of<T54>(), TypeMeta.Of<T55>(), TypeMeta.Of<T56>(), TypeMeta.Of<T57>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>(), TypeMeta.Of<T42>(), TypeMeta.Of<T43>(), TypeMeta.Of<T44>(), TypeMeta.Of<T45>(), TypeMeta.Of<T46>(), TypeMeta.Of<T47>(), TypeMeta.Of<T48>(), TypeMeta.Of<T49>(), TypeMeta.Of<T50>(), TypeMeta.Of<T51>(), TypeMeta.Of<T52>(), TypeMeta.Of<T53>(), TypeMeta.Of<T54>(), TypeMeta.Of<T55>(), TypeMeta.Of<T56>(), TypeMeta.Of<T57>(), TypeMeta.Of<T58>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>(), TypeMeta.Of<T42>(), TypeMeta.Of<T43>(), TypeMeta.Of<T44>(), TypeMeta.Of<T45>(), TypeMeta.Of<T46>(), TypeMeta.Of<T47>(), TypeMeta.Of<T48>(), TypeMeta.Of<T49>(), TypeMeta.Of<T50>(), TypeMeta.Of<T51>(), TypeMeta.Of<T52>(), TypeMeta.Of<T53>(), TypeMeta.Of<T54>(), TypeMeta.Of<T55>(), TypeMeta.Of<T56>(), TypeMeta.Of<T57>(), TypeMeta.Of<T58>(), TypeMeta.Of<T59>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>(), TypeMeta.Of<T42>(), TypeMeta.Of<T43>(), TypeMeta.Of<T44>(), TypeMeta.Of<T45>(), TypeMeta.Of<T46>(), TypeMeta.Of<T47>(), TypeMeta.Of<T48>(), TypeMeta.Of<T49>(), TypeMeta.Of<T50>(), TypeMeta.Of<T51>(), TypeMeta.Of<T52>(), TypeMeta.Of<T53>(), TypeMeta.Of<T54>(), TypeMeta.Of<T55>(), TypeMeta.Of<T56>(), TypeMeta.Of<T57>(), TypeMeta.Of<T58>(), TypeMeta.Of<T59>(), TypeMeta.Of<T60>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>(), TypeMeta.Of<T42>(), TypeMeta.Of<T43>(), TypeMeta.Of<T44>(), TypeMeta.Of<T45>(), TypeMeta.Of<T46>(), TypeMeta.Of<T47>(), TypeMeta.Of<T48>(), TypeMeta.Of<T49>(), TypeMeta.Of<T50>(), TypeMeta.Of<T51>(), TypeMeta.Of<T52>(), TypeMeta.Of<T53>(), TypeMeta.Of<T54>(), TypeMeta.Of<T55>(), TypeMeta.Of<T56>(), TypeMeta.Of<T57>(), TypeMeta.Of<T58>(), TypeMeta.Of<T59>(), TypeMeta.Of<T60>(), TypeMeta.Of<T61>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>(), TypeMeta.Of<T42>(), TypeMeta.Of<T43>(), TypeMeta.Of<T44>(), TypeMeta.Of<T45>(), TypeMeta.Of<T46>(), TypeMeta.Of<T47>(), TypeMeta.Of<T48>(), TypeMeta.Of<T49>(), TypeMeta.Of<T50>(), TypeMeta.Of<T51>(), TypeMeta.Of<T52>(), TypeMeta.Of<T53>(), TypeMeta.Of<T54>(), TypeMeta.Of<T55>(), TypeMeta.Of<T56>(), TypeMeta.Of<T57>(), TypeMeta.Of<T58>(), TypeMeta.Of<T59>(), TypeMeta.Of<T60>(), TypeMeta.Of<T61>(), TypeMeta.Of<T62>());
    }
    public static TypeSet Of<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63>() => Get<S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63>>();
    public readonly struct S<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>(), TypeMeta.Of<T42>(), TypeMeta.Of<T43>(), TypeMeta.Of<T44>(), TypeMeta.Of<T45>(), TypeMeta.Of<T46>(), TypeMeta.Of<T47>(), TypeMeta.Of<T48>(), TypeMeta.Of<T49>(), TypeMeta.Of<T50>(), TypeMeta.Of<T51>(), TypeMeta.Of<T52>(), TypeMeta.Of<T53>(), TypeMeta.Of<T54>(), TypeMeta.Of<T55>(), TypeMeta.Of<T56>(), TypeMeta.Of<T57>(), TypeMeta.Of<T58>(), TypeMeta.Of<T59>(), TypeMeta.Of<T60>(), TypeMeta.Of<T61>(), TypeMeta.Of<T62>(), TypeMeta.Of<T63>());
    }
}

public readonly partial record struct TypeSetBuilder
{
    public TypeSetBuilder Add<T0>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>())));
    public TypeSetBuilder Add<T0, T1>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>())));
    public TypeSetBuilder Add<T0, T1, T2>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>())));
    public TypeSetBuilder Add<T0, T1, T2, T3>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>(), TypeMeta.Of<T42>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>(), TypeMeta.Of<T42>(), TypeMeta.Of<T43>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>(), TypeMeta.Of<T42>(), TypeMeta.Of<T43>(), TypeMeta.Of<T44>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>(), TypeMeta.Of<T42>(), TypeMeta.Of<T43>(), TypeMeta.Of<T44>(), TypeMeta.Of<T45>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>(), TypeMeta.Of<T42>(), TypeMeta.Of<T43>(), TypeMeta.Of<T44>(), TypeMeta.Of<T45>(), TypeMeta.Of<T46>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>(), TypeMeta.Of<T42>(), TypeMeta.Of<T43>(), TypeMeta.Of<T44>(), TypeMeta.Of<T45>(), TypeMeta.Of<T46>(), TypeMeta.Of<T47>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>(), TypeMeta.Of<T42>(), TypeMeta.Of<T43>(), TypeMeta.Of<T44>(), TypeMeta.Of<T45>(), TypeMeta.Of<T46>(), TypeMeta.Of<T47>(), TypeMeta.Of<T48>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>(), TypeMeta.Of<T42>(), TypeMeta.Of<T43>(), TypeMeta.Of<T44>(), TypeMeta.Of<T45>(), TypeMeta.Of<T46>(), TypeMeta.Of<T47>(), TypeMeta.Of<T48>(), TypeMeta.Of<T49>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>(), TypeMeta.Of<T42>(), TypeMeta.Of<T43>(), TypeMeta.Of<T44>(), TypeMeta.Of<T45>(), TypeMeta.Of<T46>(), TypeMeta.Of<T47>(), TypeMeta.Of<T48>(), TypeMeta.Of<T49>(), TypeMeta.Of<T50>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>(), TypeMeta.Of<T42>(), TypeMeta.Of<T43>(), TypeMeta.Of<T44>(), TypeMeta.Of<T45>(), TypeMeta.Of<T46>(), TypeMeta.Of<T47>(), TypeMeta.Of<T48>(), TypeMeta.Of<T49>(), TypeMeta.Of<T50>(), TypeMeta.Of<T51>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>(), TypeMeta.Of<T42>(), TypeMeta.Of<T43>(), TypeMeta.Of<T44>(), TypeMeta.Of<T45>(), TypeMeta.Of<T46>(), TypeMeta.Of<T47>(), TypeMeta.Of<T48>(), TypeMeta.Of<T49>(), TypeMeta.Of<T50>(), TypeMeta.Of<T51>(), TypeMeta.Of<T52>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>(), TypeMeta.Of<T42>(), TypeMeta.Of<T43>(), TypeMeta.Of<T44>(), TypeMeta.Of<T45>(), TypeMeta.Of<T46>(), TypeMeta.Of<T47>(), TypeMeta.Of<T48>(), TypeMeta.Of<T49>(), TypeMeta.Of<T50>(), TypeMeta.Of<T51>(), TypeMeta.Of<T52>(), TypeMeta.Of<T53>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>(), TypeMeta.Of<T42>(), TypeMeta.Of<T43>(), TypeMeta.Of<T44>(), TypeMeta.Of<T45>(), TypeMeta.Of<T46>(), TypeMeta.Of<T47>(), TypeMeta.Of<T48>(), TypeMeta.Of<T49>(), TypeMeta.Of<T50>(), TypeMeta.Of<T51>(), TypeMeta.Of<T52>(), TypeMeta.Of<T53>(), TypeMeta.Of<T54>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>(), TypeMeta.Of<T42>(), TypeMeta.Of<T43>(), TypeMeta.Of<T44>(), TypeMeta.Of<T45>(), TypeMeta.Of<T46>(), TypeMeta.Of<T47>(), TypeMeta.Of<T48>(), TypeMeta.Of<T49>(), TypeMeta.Of<T50>(), TypeMeta.Of<T51>(), TypeMeta.Of<T52>(), TypeMeta.Of<T53>(), TypeMeta.Of<T54>(), TypeMeta.Of<T55>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>(), TypeMeta.Of<T42>(), TypeMeta.Of<T43>(), TypeMeta.Of<T44>(), TypeMeta.Of<T45>(), TypeMeta.Of<T46>(), TypeMeta.Of<T47>(), TypeMeta.Of<T48>(), TypeMeta.Of<T49>(), TypeMeta.Of<T50>(), TypeMeta.Of<T51>(), TypeMeta.Of<T52>(), TypeMeta.Of<T53>(), TypeMeta.Of<T54>(), TypeMeta.Of<T55>(), TypeMeta.Of<T56>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>(), TypeMeta.Of<T42>(), TypeMeta.Of<T43>(), TypeMeta.Of<T44>(), TypeMeta.Of<T45>(), TypeMeta.Of<T46>(), TypeMeta.Of<T47>(), TypeMeta.Of<T48>(), TypeMeta.Of<T49>(), TypeMeta.Of<T50>(), TypeMeta.Of<T51>(), TypeMeta.Of<T52>(), TypeMeta.Of<T53>(), TypeMeta.Of<T54>(), TypeMeta.Of<T55>(), TypeMeta.Of<T56>(), TypeMeta.Of<T57>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>(), TypeMeta.Of<T42>(), TypeMeta.Of<T43>(), TypeMeta.Of<T44>(), TypeMeta.Of<T45>(), TypeMeta.Of<T46>(), TypeMeta.Of<T47>(), TypeMeta.Of<T48>(), TypeMeta.Of<T49>(), TypeMeta.Of<T50>(), TypeMeta.Of<T51>(), TypeMeta.Of<T52>(), TypeMeta.Of<T53>(), TypeMeta.Of<T54>(), TypeMeta.Of<T55>(), TypeMeta.Of<T56>(), TypeMeta.Of<T57>(), TypeMeta.Of<T58>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>(), TypeMeta.Of<T42>(), TypeMeta.Of<T43>(), TypeMeta.Of<T44>(), TypeMeta.Of<T45>(), TypeMeta.Of<T46>(), TypeMeta.Of<T47>(), TypeMeta.Of<T48>(), TypeMeta.Of<T49>(), TypeMeta.Of<T50>(), TypeMeta.Of<T51>(), TypeMeta.Of<T52>(), TypeMeta.Of<T53>(), TypeMeta.Of<T54>(), TypeMeta.Of<T55>(), TypeMeta.Of<T56>(), TypeMeta.Of<T57>(), TypeMeta.Of<T58>(), TypeMeta.Of<T59>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>(), TypeMeta.Of<T42>(), TypeMeta.Of<T43>(), TypeMeta.Of<T44>(), TypeMeta.Of<T45>(), TypeMeta.Of<T46>(), TypeMeta.Of<T47>(), TypeMeta.Of<T48>(), TypeMeta.Of<T49>(), TypeMeta.Of<T50>(), TypeMeta.Of<T51>(), TypeMeta.Of<T52>(), TypeMeta.Of<T53>(), TypeMeta.Of<T54>(), TypeMeta.Of<T55>(), TypeMeta.Of<T56>(), TypeMeta.Of<T57>(), TypeMeta.Of<T58>(), TypeMeta.Of<T59>(), TypeMeta.Of<T60>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>(), TypeMeta.Of<T42>(), TypeMeta.Of<T43>(), TypeMeta.Of<T44>(), TypeMeta.Of<T45>(), TypeMeta.Of<T46>(), TypeMeta.Of<T47>(), TypeMeta.Of<T48>(), TypeMeta.Of<T49>(), TypeMeta.Of<T50>(), TypeMeta.Of<T51>(), TypeMeta.Of<T52>(), TypeMeta.Of<T53>(), TypeMeta.Of<T54>(), TypeMeta.Of<T55>(), TypeMeta.Of<T56>(), TypeMeta.Of<T57>(), TypeMeta.Of<T58>(), TypeMeta.Of<T59>(), TypeMeta.Of<T60>(), TypeMeta.Of<T61>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>(), TypeMeta.Of<T42>(), TypeMeta.Of<T43>(), TypeMeta.Of<T44>(), TypeMeta.Of<T45>(), TypeMeta.Of<T46>(), TypeMeta.Of<T47>(), TypeMeta.Of<T48>(), TypeMeta.Of<T49>(), TypeMeta.Of<T50>(), TypeMeta.Of<T51>(), TypeMeta.Of<T52>(), TypeMeta.Of<T53>(), TypeMeta.Of<T54>(), TypeMeta.Of<T55>(), TypeMeta.Of<T56>(), TypeMeta.Of<T57>(), TypeMeta.Of<T58>(), TypeMeta.Of<T59>(), TypeMeta.Of<T60>(), TypeMeta.Of<T61>(), TypeMeta.Of<T62>())));
    public TypeSetBuilder Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63>() => new(Types.Union(ImmutableHashSet.Create(TypeMeta.Of<T0>(), TypeMeta.Of<T1>(), TypeMeta.Of<T2>(), TypeMeta.Of<T3>(), TypeMeta.Of<T4>(), TypeMeta.Of<T5>(), TypeMeta.Of<T6>(), TypeMeta.Of<T7>(), TypeMeta.Of<T8>(), TypeMeta.Of<T9>(), TypeMeta.Of<T10>(), TypeMeta.Of<T11>(), TypeMeta.Of<T12>(), TypeMeta.Of<T13>(), TypeMeta.Of<T14>(), TypeMeta.Of<T15>(), TypeMeta.Of<T16>(), TypeMeta.Of<T17>(), TypeMeta.Of<T18>(), TypeMeta.Of<T19>(), TypeMeta.Of<T20>(), TypeMeta.Of<T21>(), TypeMeta.Of<T22>(), TypeMeta.Of<T23>(), TypeMeta.Of<T24>(), TypeMeta.Of<T25>(), TypeMeta.Of<T26>(), TypeMeta.Of<T27>(), TypeMeta.Of<T28>(), TypeMeta.Of<T29>(), TypeMeta.Of<T30>(), TypeMeta.Of<T31>(), TypeMeta.Of<T32>(), TypeMeta.Of<T33>(), TypeMeta.Of<T34>(), TypeMeta.Of<T35>(), TypeMeta.Of<T36>(), TypeMeta.Of<T37>(), TypeMeta.Of<T38>(), TypeMeta.Of<T39>(), TypeMeta.Of<T40>(), TypeMeta.Of<T41>(), TypeMeta.Of<T42>(), TypeMeta.Of<T43>(), TypeMeta.Of<T44>(), TypeMeta.Of<T45>(), TypeMeta.Of<T46>(), TypeMeta.Of<T47>(), TypeMeta.Of<T48>(), TypeMeta.Of<T49>(), TypeMeta.Of<T50>(), TypeMeta.Of<T51>(), TypeMeta.Of<T52>(), TypeMeta.Of<T53>(), TypeMeta.Of<T54>(), TypeMeta.Of<T55>(), TypeMeta.Of<T56>(), TypeMeta.Of<T57>(), TypeMeta.Of<T58>(), TypeMeta.Of<T59>(), TypeMeta.Of<T60>(), TypeMeta.Of<T61>(), TypeMeta.Of<T62>(), TypeMeta.Of<T63>())));

}
