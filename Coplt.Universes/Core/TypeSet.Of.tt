<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>// generated by template, do not modify manually

using System.Collections.Immutable;
using System.Runtime.CompilerServices;

namespace Coplt.Universes.Core;

public abstract partial class TypeSet
{
<#
    for (var i = 1; i <= 64; i++)
    {
        var types = string.Join(", ", Enumerable.Range(0, i).Select(n => $"T{n}"));
        var ofs = string.Join(", ", Enumerable.Range(0, i).Select(n => $"TypeMeta.Of<T{n}>()"));
#>
    public static TypeSet Of<<#= types #>>() => Get<S<<#= types #>>>();
    public readonly struct S<<#= types #>> : ITypeSet
    {
        // ReSharper disable once StaticMemberInGenericType
        public static ImmutableHashSet<TypeMeta> Types
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;
        } = ImmutableHashSet.Create(<#= ofs #>);
    }
<#
    }
#>
}

public readonly partial record struct TypeSetBuilder
{
<#
    for (var i = 1; i <= 64; i++)
    {
        var types = string.Join(", ", Enumerable.Range(0, i).Select(n => $"T{n}"));
        var ofs = string.Join(", ", Enumerable.Range(0, i).Select(n => $"TypeMeta.Of<T{n}>()"));
#>
    public TypeSetBuilder Add<<#= types #>>() => new(Types.Union(ImmutableHashSet.Create(<#= ofs #>)));
<#
    }
#>

}
